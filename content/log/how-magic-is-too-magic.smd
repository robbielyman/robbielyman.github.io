---
.title = "How magic is too magic? Fun with Lua userdata",
.date = @date("2024-10-13T19:30:00-04:00"),
.author = "Robbie Lyman",
.layout = "post.shtml",
.draft = false,
---
[]($section.id('summary'))
I’ve heard people observe that although we often think of
language as purely a medium for expressing
something that exists prior to language,
that the words available to us shape who we are as well.
I think there’s some truth to this:
I took four semesters of Japanese in grad school—not enough
to approach fluency without intensive immersion,
but plenty to start feeling out the language.
I found that at the time my personality as expressed in Japanese
was a bit more cautious than I am in English.

It’s interesting to observe that this difference in what I
_want_ to express and _how_ is also present for me in programming.
Not every language I’ve written a line of
has a personality for me yet—mostly this correlates
with how seriously I’ve learned what the language has to offer,
but interestingly as I’ve improved as a programmer,
the personality associations have also started coming faster.

[]($section.id('remainder'))

The languages I know best are Zig, Lua and Rust,
each of which comes with very different goals and assumptions,
lending to a different style in terms of what feels fun to do.

# Comparing three languages

Of these three, I think it’s obvious that Zig
is the most serious programming language.
It prides itself on having “no hidden control flow”,
for example,
hands you control (if you want it)
over the memory layout of types,
and requires you to manage memory correctly.
That’s not to say Zig isn’t fun:
when [I implemented]($link.url("https://github.com/robbielyman/uxn-zig")) the [Uxn]($link.url("https://100r.co/site/uxn.html")) virtual machine,
I was able to define my own type
which takes up one byte of space,
but treats each bit of that byte correctly
as either a “mode flag” or as part of a list of instructions.
Whereas in C one has to do bitwise arithmetic directly,
in Zig you can ask whether a bit is set
as if it were a regular boolean,
or switch on only the enum field of the byte-sized struct.
Other classic metaprogramming tasks are also a joy in Zig,
simply because they realized that programming Zig
should be done in Zig,
even if the purpose of that code is to construct a generic type
and so the code runs at _compile time_ instead of run time.

Rust, by comparison, is positively loosey-goosey.
I’ve read too many complaints that Rust is hard
because of the borrow checker and having to think about ownership.
I could be wrong, but I think the reason for these complaints
is because Rust was born as a Haskell
that realized it could come for C++’s crown,
but has morphed instead into a JavaScript
run on that most virtual of machines,
the actual CPU.

When you think about it using these frames,
Rust is a joy to write.
The borrow checker makes powerful, “zero-cost” abstractions possible,
like copy-on-write structures,
reference counting,
`Impl Drop for T` running arbitrary code,
closures, iterators, etc.
Combine this with implicit returns
and chainable methods,
and you get the ability to write these beautifully terse koans
that through the magic of LLVM are somehow also fast too.
I love writing Rust; it makes me want to give it a noogie.
Is your object on the stack or the heap?
You actually probably don’t get to know,
but as long as you and the borrow checker agree,
you don’t really need to, either.

Lua is interesting.
On the one hand,
somehow the `do` and the `then` and the `function`
spelled all the way out like that give it a certain amount of clunk.
On the other hand, if you’re willing to venture into the corners
of the language,
magic is truly possible.
I want to spend the rest of this post describing
a use of the Lua API that I’m pretty proud of.

# Lua types

Lua has very few types;
this is to facilitate holding the entire language in your head
as much as possible.
Here is the full list:
`nil`, `boolean`, `number`
(integers, interestingly, exist as a bit of an odd subtype),
`string`, `table`, `userdata`, “light userdata”, `thread` (really “coroutine” or “stack”) and `function`.
Light userdata differ from “full” userdata in two ways:
from C’s (or Zig’s) perspective,
light userdata are just pointers;
the object they point to is not in Lua’s universe
so is not subject to garbage collection
and mostly just sleets through the Lua environment undisturbed;
their purpose is largely to enable Lua functions implemented in C
to get handles to relevant data from the host environment.
That’s one way; the other is that light userdata
cannot be operated on—you can ask whether they’re equal
(that’s just whether the addresses are equal),
but you can’t index into them like you can a table.

## Userdata and metatables

Full userdata, on the other hand,
are also “just pointers” from C’s perspective,
but the memory they point to is owned by the Lua environment,
so is subject to garbage collection.
In contrast to light userdata,
full userdata may be made to behave
more or less in the way that Lua tables do
by providing a _metatable_ for them.

A metatable is what it sounds like.
I’m so sorry for writing that,
but it’s true; at least in the common sense of
“meta” as “referring to its own category”.
functionally in Lua,
the point of tables is that you can index into them.
(They’re an interesting mix between
an array and a hash map.)
When a table `t` is missing a key `k`,
but `t` has a metatable `mt`,
the Lua virtual machine will query `mt`
for its `__index` metamethod.
If `__index` is a table,
what you get will be `mt.__index[k]`.
Otherwise if `__index` is a function,
what you get is the result of `mt.__index(t, k)`.
There is also a `__newindex` metamethod.
Metatables provide other functionality too:
for exapmle, if you want to be able to add two tables together,
you can do that with an `__add` metamethod.
Or you want to `__call` a table as if it were a function?
That’s allowed!

The interesting thing about this
is that because functions are code,
this means you can really go wild.

# `seamstress.Timer`

I’m working on a version 2.0 of [seamstress]($link.url("https://github.com/robbielyman/seamstress")),
a batteries-included Lua runtime
that I’m envisioning as an “art engine”.
The seamstress project grows out of my appreciation
for the [monome]($link.url("https://monome.org")) [norns]($link.url("https://github.com/monome/norns")),
which also exposes Lua scripting capability.
Since it’s intended for making music,
the norns environment has a lot of very smart thinking around
enabling working with time,
one of which is the `metro` object,
which is the starting point for `seamstress.Timer`.

## norns’ `metro`

In norns, there are two core processes for interacting with time.
One is called `clock`, which makes use of Lua’s
coroutine functionality.
In Lua, a coroutine that has called `yield` will not resume
until another coroutine calls `resume` on it.
The norns `clock` system provides
two wrappers around `coroutine.yield`;
`clock.sleep` and `clock.sync`,
both of which schedule a wakeup event for some time in the future,
but with different semantics:
`clock.sleep` takes in an argument representing how many seconds
in the future to wake up,
while `clock.sync` thinks of time metronomically in beats.

The other method for interacting with time on norns is `metro`.
A `metro` on norns spawns a thread whose job is to
schedule a wakeup for the `metro` object,
which results in calling its function.
Semantically these are slightly different:
To repeat an action with the `clock` functionality,
you add a loop to the function you’re creating.
To repeat an action with the `metro` functionality,
you just wait for the `metro` tick to happen again.

## `Timer` and its fields

Currently, `seamstress.Timer`
is one of the few seamstress modules
which are loaded on startup and available
as fields on the global `seamstress` object.
the `seamstress.Timer` field is a function
which, when called, returns a new `Timer`.
Using it looks a bit like this:

[]($code.asset("seamstress-timer.lua").language("lua"))
